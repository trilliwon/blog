{"componentChunkName":"component---src-templates-blog-post-js","path":"/ios/2018-12-29-swift-closure/","result":{"data":{"site":{"siteMetadata":{"title":"Won"}},"markdownRemark":{"id":"d0850513-4a9b-5d3a-a749-91ce10b2071a","excerpt":"Capturing Values 현재 컨텍스트에서 값들을 캡쳐한다.  클로져 자체는 environment 와 state A closure is a record storing a function together with an environment. A closure—unlike a…","html":"<h2>Capturing Values</h2>\n<ul>\n<li>현재 컨텍스트에서 값들을 캡쳐한다. </li>\n<li>클로져 자체는 environment 와 state</li>\n<li>A closure is a record storing a function together with an environment.</li>\n<li>A closure—unlike a plain function—allows the function to access those captured variables through the closure’s copies of their values or references, even when the function is invoked outside their scope.</li>\n</ul>\n<h2>Escaping Closures</h2>\n<blockquote>\n<p>A closure is said to escape a function when the closure is passed as an argument to the function, but is called after the function returns.</p>\n</blockquote>\n<hr>\n<h2>autoclosures</h2>\n<ul>\n<li>function type 의 파라미터를 클로져로 사용할 수 있도록 해준다.</li>\n</ul>","frontmatter":{"title":"Swift Closure","date":"December 30, 2018","description":null}}},"pageContext":{"slug":"/ios/2018-12-29-swift-closure/","previous":{"fields":{"slug":"/ios/2018-12-29-swift-instance-method-and-type-method/"},"frontmatter":{"title":"Instance Method vs Type method"}},"next":{"fields":{"slug":"/ios/2018-12-29-swift-ARC/"},"frontmatter":{"title":"Swift ARC"}}}},"staticQueryHashes":["240262808","2841359383"]}