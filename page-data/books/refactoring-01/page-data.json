{"componentChunkName":"component---src-templates-blog-post-js","path":"/books/refactoring-01/","result":{"data":{"site":{"siteMetadata":{"title":"Won"}},"markdownRemark":{"id":"436b7ce6-09e1-5b9b-ba16-554e0eced962","excerpt":"…","html":"<h2>리팩터링</h2>\n<blockquote>\n<p>리팩터링이란 겉으로 드러나는 코드의 기능(겉보기 동작)은 바꾸지 않으면서 내부 구조를 개선하는 방식으로 소프트웨어 시스템을 수정하는 과정이다. 버그가 생길 가능성을 최소로 줄이면서 코드를 정리하는 정제된 방법이다. 요컨대, 리팩터링한다는 것은 코드를 작성하고 난 뒤에 설계를 개선하는 일이다.</p>\n</blockquote>\n<ul>\n<li>duc typing: js 는 구조를 기준으로 타입을 구분한다. “만약 어떤 새가 오리(duck)처럼 걷고, 헤엄치고, 꽥꽥거린다면 나는 그 새를 오리라고 부를 것이다.”</li>\n</ul>","frontmatter":{"title":"책 리팩터링 1","date":"April 10, 2021","description":"책 리팩터링을 읽으면서 정리하는 글"}}},"pageContext":{"slug":"/books/refactoring-01/","previous":{"fields":{"slug":"/js/snakeToCamel/"},"frontmatter":{"title":"Snake to Camel in js"}},"next":{"fields":{"slug":"/ts/respawn/"},"frontmatter":{"title":"Typescript development mode"}}}},"staticQueryHashes":["240262808","2841359383"]}