{"componentChunkName":"component---src-templates-blog-post-js","path":"/topics/2018-04-06-standard-ml-topics/","result":{"data":{"site":{"siteMetadata":{"title":"Won"}},"markdownRemark":{"id":"7024a9a6-2fd6-51b1-b056-f5a027a6429b","excerpt":"Standard ML Topics Pairs, Lists, Local Bindings, Benefit of No Mutation Records, Datatypes, Case Expressions and more A variable binding The semantics Syntax is…","html":"<h1>Standard ML Topics</h1>\n<hr>\n<h2>Pairs, Lists, Local Bindings, Benefit of No Mutation</h2>\n<h2>Records, Datatypes, Case Expressions and more</h2>\n<ul>\n<li>A variable binding</li>\n<li>\n<p>The semantics</p>\n<ul>\n<li>Syntax is just how you write something</li>\n<li>\n<p>Semantics is what that something means</p>\n<ul>\n<li>Type-checking (before program runs)</li>\n<li>Evaluation (as program runs)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Expressions</li>\n<li>Variables</li>\n<li>Conditional Expression</li>\n<li>Function definitions</li>\n<li>Recursion</li>\n<li>Function bindings</li>\n<li>Function Calls</li>\n<li>Functions as Parameters</li>\n<li>Tuples and lists</li>\n<li>Pairs (2-tuples)</li>\n<li>Nesting</li>\n<li>Building Lists</li>\n<li>Accessing Lists</li>\n<li>Type-checking list operations</li>\n<li>Let-expressions</li>\n<li>Options</li>\n</ul>\n<hr>\n<h2>Nested Patterns, Exceptions, Tail Recursion</h2>\n<ul>\n<li>Syntactic sugar</li>\n<li>Records</li>\n<li>Datatypes</li>\n<li>Datatype bindings</li>\n<li>Case</li>\n<li>Patterns</li>\n<li>Expression Trees</li>\n<li>Recursion</li>\n<li>Recursive datatypes</li>\n<li>Options are datatypes</li>\n<li>Lists are datatypes</li>\n<li>Case Expressions</li>\n<li>pattern-matching</li>\n<li>Each-of types</li>\n<li>Val-binding patterns</li>\n<li>Function-argument patterns</li>\n<li>Nested patterns</li>\n<li>Exceptions</li>\n<li>Call-stacks</li>\n<li>Moral of tail recursion</li>\n</ul>\n<hr>\n<h2>First-Class Functions, Subtyping</h2>\n<ul>\n<li>First-class functions</li>\n<li>Function Closures</li>\n<li>Functions as arguments</li>\n<li>Relation to types</li>\n<li>Polymorphism and higher-order functions</li>\n<li>Anonymous functions</li>\n<li>Map</li>\n<li>Filter</li>\n<li>Generalizing</li>\n<li>Returning functions</li>\n<li>Type Generality</li>\n<li>Subtype</li>\n</ul>\n<hr>\n<h2>Lexical Scope, Function Closures, and Function Closure Idioms</h2>\n<ul>\n<li>Recomputation</li>\n<li>Another famous function: Fold</li>\n<li>Combine functions</li>\n<li>Currying</li>\n<li>Curried fold</li>\n<li>Unnecessary function wrapping</li>\n<li>Iterators</li>\n<li>References</li>\n<li>Callbacks</li>\n<li>Mutable state</li>\n<li>Library implementation</li>\n<li>Clients</li>\n<li>Implementing an ADT</li>\n</ul>\n<hr>\n<h2>ML Modules</h2>\n<ul>\n<li>Modules</li>\n<li>Namespace management</li>\n<li>Signatures</li>\n<li>Hiding things</li>\n<li>Hiding with functions</li>\n<li>Library spec and invariants</li>\n<li>Abstract types</li>\n<li>Signature matching</li>\n<li>Equivalent implementations</li>\n</ul>","frontmatter":{"title":"Standard ML","date":"April 06, 2018","description":"Topics about Standard ML functional programming language"}}},"pageContext":{"slug":"/topics/2018-04-06-standard-ml-topics/","previous":{"fields":{"slug":"/topics/2018-03-14-functional-programming-concepts/"},"frontmatter":{"title":"Functional Programming Concepts"}},"next":{"fields":{"slug":"/topics/2018-04-06-ai-topics/"},"frontmatter":{"title":"인공지능 개론 - Topics"}}}},"staticQueryHashes":["240262808","2841359383"]}